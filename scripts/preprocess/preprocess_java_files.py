import re
import argparse
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
import os


def parse_arguments() -> dict:

    parser = argparse.ArgumentParser(description='Preprocess the Java files generated by the model.')

    parser.add_argument(
        '--leetcode_description', type=str, help='Prompt to send to the model', required=True
    )
    parser.add_argument(
        '--temperature', help='Temperature for the response generation', required=True
    )
    parser.add_argument(
        '--task', type=str, help='Task to perform (python2java, java2python, python, etc)', required=True  
    )
    parser.add_argument(
        '--sampling', type=str, help='Sampling method (twenty queries vs one query)', required=True
    )
    parser.add_argument(
        '--model', type=str, help='Model to use for the response generation', required=True
    )

    args = parser.parse_args()

    return args

def preprocess_combined_java_files(filepath: str) -> None:
    # -- Get the filepaths -- #
    combined_file_path = os.path.join(filepath, "llm_generated/generated.java")
    
    # -- Read the combined file -- #
    with open(combined_file_path, "r") as file:
        combined_content = file.read()
    # -- Split the classes based on the "class Solution" keyword -- #
    if "public class Solution" in combined_content:
        classes = re.split(r"public class Solution", combined_content)
    elif "class Solution" in combined_content:
        classes = re.split(r"class Solution", combined_content)

    for i, class_content in enumerate(classes):
        logging.info(f"Preprocessing Solution{i} for {filepath}")
        preprocessed_file_path = os.path.join(filepath, "preprocessed")
        preprocessed_file_path = os.path.join(preprocessed_file_path, f"Solution{i}")
        if i == 0:
            continue
        # -- Remove the import statements and the markdown code block -- #
        for line in class_content.split("\n"):
            if line.endswith(".") or line.startswith("import"):
                # delete the import statements
                class_content = class_content.replace(line, "")
        # -- Replace the class name with Solution{i} -- #
        pattern = re.compile(r"Solution\d*")
        class_content = pattern.sub(f"Solution{i} ", class_content)

        
        class_content = class_content.replace("```java", "")
        class_content = class_content.replace("```", "")

        # --- Create class content --- #
        class_content = f"import java.util.*;\nimport java.io.*;\nclass Solution{i}" + class_content
        # -- Write the class to a file -- #
        if not os.path.exists(preprocessed_file_path):
            os.makedirs(preprocessed_file_path, exist_ok=True)
        with open(os.path.join(preprocessed_file_path, f"Solution{i}.java"), "w") as file:
            file.write(class_content)

def preprocess_separate_java_files(dirpath: str) -> None:
    
    for file in os.listdir(os.path.join(dirpath, "llm_generated")):
        main_flag = False
        logging.info(f"Preprocessing {file} for {dirpath}")
       
        # -- Get the filepaths -- #
        filepath= os.path.join(dirpath, "llm_generated", file)
        number_of_file = re.findall(r'\d+', file)[0]
        preprocessed_file_path = os.path.join(dirpath, "preprocessed")
        preprocessed_file_path = os.path.join(preprocessed_file_path, f"Solution{number_of_file}")

        # -- Read the combined file -- #
        with open(filepath, "r") as file:
            file_content = file.read()
        
        # -- Remove the import statements and the markdown code block -- #
        if "```java" in file_content and "```" in file_content:
            # get everything between the two markdown code blocks
            file_content = re.search(r'```java(.*?)```', file_content, re.DOTALL).group(1)
        for line in file_content.split("\n"):
            if "import" in line:
                # delete the import statements
                file_content = file_content.replace(line, "")
                
            if "```java" in line:
                # delete the markdown code block
                file_content = file_content.replace(line, "")
            if "```" in line:
                # delete the markdown code block
                file_content = file_content.replace(line, "")
        
        # --- Create class content --- #
        pattern = re.compile(r"Solution\d*")
        file_content = pattern.sub(f"Solution{number_of_file}", file_content)
        file_content = f"import java.util.*;\nimport java.io.*;\n" + file_content

        # --- Put Main Class in a separate file and take it out of file_content --- #
        if "public class Main {" in file_content:
            main_flag = True
            main_class = re.split(r"public class Main {", file_content) 
            main_class_content = main_class[1]

            # -- Write the main class to a file -- #
            if not os.path.exists(preprocessed_file_path):
                os.makedirs(preprocessed_file_path, exist_ok=True)
            
            with open(os.path.join(preprocessed_file_path, f"Main.java"), "w") as file:
                main_class_content = "import java.util.*;\nimport java.io.*;\npublic class Main {" + main_class_content
                file.write(main_class_content)


        # -- Write the class to a file -- #
        if not os.path.exists(preprocessed_file_path):
            os.makedirs(preprocessed_file_path, exist_ok=True)
        
        with open(os.path.join(preprocessed_file_path, f"Solution{number_of_file}.java"), "w") as file:
            if main_flag:
                file.write(main_class[0])
            else:
                file.write(file_content)

def main():
    # -- Get the command line arguments -- #
    args = parse_arguments()
    task = args.task
    model = args.model
    leetcode = args.leetcode_description
    temperature = args.temperature
    sampling = args.sampling

    # -- Fix temperature bug -- #
    if temperature == "0" or temperature == "1" or temperature == "2":
        temperature = int(temperature)
    else:
        temperature = float(temperature)

    # -- Create the filepath -- #
    filepath = f"../../data/{leetcode}/{temperature}/{model}/{task}/{sampling}"
    
    
    # -- Preprocess Java Files -- #
    if sampling == "once":
        preprocess_combined_java_files(filepath)
    elif sampling == "repeated":
        preprocess_separate_java_files(filepath)
    
    
if __name__ == '__main__':
    main()